# Базовый алгоритм для сортировки слиянием — алгоритм слияния двух упорядоченных массивов
# в один упорядоченный массив. Эта операция выполняется за линейное время с линейным потреблением памяти.
# Реализуйте слияние двух массивов в качестве первого шага для написания сортировки слиянием.
#
# Формат ввода
# В первой строке входного файла содержится число N — количество элементов первого массива (0 ≤ N ≤ 10**6).
# Во второй строке содержатся N целых чисел ai, разделенных пробелами,
# отсортированные по неубыванию (-10**9 ≤ ai ≤ 10**9).
# В третьей строке входного файла содержится число M — количество элементов второго массива (0 ≤ M ≤ 10**6).
# В третьей строке содежатся M целых чисел bi, разделенных пробелами,
# отсортированные по неубыванию (-10**9 ≤ bi ≤ 10**9).
#
# Формат вывода
# Выведите результат слияния этих двух массивов, то есть M + N целых чисел, разделенных пробелами, в порядке неубывания.

def merge(merged_arr, arr_1, arr_2, left_1, right_1, left_2, right_2):
    p_1 = left_1
    p_2 = left_2
    while p_1 != right_1 and p_2 != right_2:
        if arr_1[p_1] <= arr_2[p_2]:
            merged_arr.append(arr_1[p_1])
            p_1 += 1
        else:
            merged_arr.append(arr_2[p_2])
            p_2 += 1
    if p_1 == right_1:
        merged_arr += arr_2[p_2:]
    else:
        merged_arr += arr_1[p_1:]

n_1 = int(input())
arr_1 = list(map(int, input().split()))
n_2 = int(input())
arr_2 = list(map(int, input().split()))
result = []
merge(result, arr_1, arr_2, 0, n_1, 0, n_2)
print(*result)
